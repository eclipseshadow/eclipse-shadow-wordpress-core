{
  "name": "grunt-git",
  "description": "Git commands for grunt.",
  "version": "0.1.5",
  "homepage": "https://github.com/rubenv/grunt-git",
  "author": {
    "name": "Ruben Vermeersch",
    "email": "ruben@savanne.be",
    "url": "http://savanne.be/"
  },
  "contributors": [
    {
      "name": "Andrew Pope",
      "email": "drewii2ii@gmail.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/rubenv/grunt-git.git"
  },
  "bugs": {
    "url": "https://github.com/rubenv/grunt-git/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/rubenv/grunt-git/blob/master/LICENSE"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.1.1",
    "grunt-contrib-clean": "~0.4.0",
    "grunt": "~0.4.0",
    "grunt-mocha-cli": "~1.0.1",
    "grunt-release": "~0.3.5"
  },
  "peerDependencies": {
    "grunt": "~0.4.0"
  },
  "keywords": [
    "gruntplugin"
  ],
  "readme": "# grunt-git\n\n> Git commands for grunt.\n\n[![Build Status](https://travis-ci.org/rubenv/grunt-git.png?branch=master)](https://travis-ci.org/rubenv/grunt-git)\n\n## Getting Started\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-git --save-dev\n```\n\nOne the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-git');\n```\n\n## The \"gitcommit\" task\n\nCommits the working directory.\n\n### Overview\nIn your project's Gruntfile, add a section named `gitcommit` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  gitcommit: {\n    your_target: {\n      options: {\n        // Target-specific options go here.\n      },\n      files: {\n          // Specify the files you want to commit\n      }\n    }\n  },\n})\n```\n\nEach target defines a specific git task that can be run. The different available tasks are listed below.\n\n### Options\n\n#### options.message\nType: `String`\nDefault value: `'Commit'`\n\nThe commit message.\n\n#### options.ignoreEmpty\nType: `Boolean`\nDefault value: `false`\n\nWhen `true`, the task will not fail when there are no staged changes (optional).\n\n### Usage Examples\n\nCommit options:\n\n* `message`: Commit message\n* `files`: Files to commit\n\n```js\ngrunt.initConfig({\n    gitcommit: {\n        task: {\n            options: {\n                message: 'Testing'\n            },\n            files: {\n                src: ['test.txt']\n            }\n        }\n    },\n});\n```\n\n## The \"gittag\" task\n\nCreates a git tag.\n\n### Overview\nIn your project's Gruntfile, add a section named `gittag` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  gittag: {\n    your_target: {\n      options: {\n        // Target-specific options go here.\n      }\n    }\n  },\n})\n```\n\nEach target defines a specific git task that can be run. The different available tasks are listed below.\n\n### Options\n\n#### options.tag\nType: `String`\nDefault value: `''`\n\nThe name of the tag. E.g.: `0.0.1`.\n\n#### options.message\nType: `String`\nDefault value: `''`\n\nThe tag message (optional).\n\n### Usage Examples\n\n```js\ngrunt.initConfig({\n    gittag: {\n        task: {\n            options: {\n                tag: '0.0.1',\n                message: 'Testing'\n            }\n        }\n    },\n});\n```\n\n## The \"gitcheckout\" task\n\nCreates a git branch using checkout -b, or checks out a given branch.\n\n### Overview\nIn your project's Gruntfile, add a section named `gitcheckout` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  gitcheckout: {\n    your_target: {\n      options: {\n        // Target-specific options go here.\n      }\n    }\n  },\n})\n```\n\nEach target defines a specific git task that can be run. The different available tasks are listed below.\n\n### Options\n\n#### options.branch\nType: `String`\nDefault value: `''`\n\nThe name of the branch. E.g.: `testing`.\n\n#### options.create\nType: `Boolean`\nDefault value: `false`\n\nWhether the branch should be created (optional).\n\n### Usage Examples\n\n```js\ngrunt.initConfig({\n    gittag: {\n        task: {\n            options: {\n                branch: 'testing',\n                create: true\n            }\n        }\n    },\n});\n```\n\n## The \"gitstash\" task\n\nCreates a git branch using checkout -b, or checks out a given branch.\n\n### Overview\nIn your project's Gruntfile, add a section named `gitstash` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  gitstash: {\n    your_target: {\n      options: {\n        // Target-specific options go here.\n      }\n    }\n  },\n})\n```\n\nEach target defines a specific git task that can be run. The different available tasks are listed below.\n\n### Options\n\n#### options.command\nType: `String`\nDefault value: `'save'`\n\nThe stash command to run. E.g.: `save`, `apply`.\n\n#### options.stash\nType: `Integer`\nDefault value: `''`\n\nThe stash to apply. E.g.: `0` (optional).\n\n#### options.staged\nType: `Boolean`\nDefault value: `false`\n\nWhether the staged changes should be reapplied (optional).\n\n### Usage Examples\n\n```js\ngrunt.initConfig({\n    gittag: {\n        stash: {\n            options: {\n                create: true\n            }\n        },\n        apply: {\n            options: {\n                command: 'apply',\n                staged: true,\n                stash: '0'\n            }\n        }\n    },\n});\n```\n\n## The \"gitclone\" task\n\nClones a git repo.\n\n### Overview\nIn your project's Gruntfile, add a section named `gitclone` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  gitclone: {\n    your_target: {\n      options: {\n        // Target-specific options go here.\n      }\n    }\n  },\n})\n```\n\nEach target defines a specific git task that can be run. The different available tasks are listed below.\n\n### Options\n\n#### options.bare\nType: `Boolean`\nDefault value: none\n\nRun git clone with the `--bare` option applied.\n\n#### options.branch\nType: `String`\nDefault value: none\n\nClone the repo with a specific branch checked out. (Cannot be used in conjunction with 'bare')\n\n#### options.repository (required)\nType: `String`\nDefault value: none\n\nThe path to the repository you want to clone.\n\n#### options.directory\nType: `String`\nDefault value: none\n\nClone the repo into a specific directory instead of the one git decides.\n\n### Usage Examples\n\n```js\ngrunt.initConfig({\n    gitclone: {\n        clone: {\n            options: {\n                repo: 'https://github.com/you/your-git-repo.git',\n                branch: 'my-branch',\n                directory: 'repo'\n            }\n        }\n    },\n});\n```\n\n## The \"gitreset\" task\n\nCreates a git branch using checkout -b, or checks out a given branch.\n\n### Overview\nIn your project's Gruntfile, add a section named `gitreset` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  gitreset: {\n    your_target: {\n      options: {\n        // Target-specific options go here.\n      },\n      files: {\n        src: // Target-specific files go here.\n      }\n    }\n  },\n})\n```\n\nEach target defines a specific git task that can be run. The different available tasks are listed below.\n\n### Options\n\n#### options.mode\nType: `String`\nDefault value: `''`\n\nThe reset mode to run. E.g.: `hard`, `merge`.\n\n#### options.commit\nType: `String`\nDefault value: `'HEAD'`\n\nWhich commit to reset to (optional).\n\n### Usage Examples\n\n```js\ngrunt.initConfig({\n    gitreset: {\n        task: {\n            options: {\n                mode: 'hard',\n                commit: 'HEAD~1'\n            }\n        }\n    },\n});\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n",
  "readmeFilename": "README.md",
  "_id": "grunt-git@0.1.5",
  "dist": {
    "shasum": "eaa336dd16c5f0b2257316bc23c6f1051a9a13e0"
  },
  "_from": "grunt-git@",
  "_resolved": "https://registry.npmjs.org/grunt-git/-/grunt-git-0.1.5.tgz"
}
